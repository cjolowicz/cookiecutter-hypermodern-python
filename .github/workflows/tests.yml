name: Tests
on: push
jobs:
  tests:
    strategy:
      matrix:
        os: ["ubuntu-latest", "windows-latest", "macos-latest"]
        python-version: ["3.6", "3.7", "3.8"]
    name: Python ${{ matrix.python-version }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2.1.0
        with:
          path: cookiecutter-hypermodern-python
      - uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install tools using pip
        working-directory: cookiecutter-hypermodern-python
        run: |
          pip install --constraint=.github/workflows/constraints.txt pip
          pip install --constraint=.github/workflows/constraints.txt cookiecutter nox poetry pre-commit
      - name: Generate project using Cookiecutter
        run: cookiecutter --no-input cookiecutter-hypermodern-python
      - name: Create git repository
        if: matrix.os != 'windows-latest'
        run: |
          git init
          git config --local user.name "GitHub Action"
          git config --local user.email "action@github.com"
          git add .
          git commit --message="Initial import"
        working-directory: hypermodern-python
      - name: Create git repository (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          git init
          git config --local user.name "GitHub Action"
          git config --local user.email "action@github.com"
          # https://github.com/cookiecutter/cookiecutter/issues/405
          $ErrorActionPreference = "Continue"
          git add .
          $ErrorActionPreference = "Stop"
          git add --renormalize .
          git commit --message="Initial import"
        working-directory: hypermodern-python
      - name: Run test suite using Nox
        run: nox --force-color
        working-directory: hypermodern-python
      - name: Build project documentation
        run: nox --force-color --session=docs
        working-directory: hypermodern-python
      - name: Install dependencies using Poetry
        run: poetry install --ansi
        working-directory: hypermodern-python
      - name: Compute cache key for pre-commit
        id: cache_key
        shell: python
        run: |
          import hashlib
          import sys

          python = "py{}.{}".format(*sys.version_info[:2])
          payload = sys.version.encode() + sys.executable.encode()
          digest = hashlib.sha256(payload).hexdigest()
          result = "${{ runner.os }}-{}-{}-pre-commit".format(python, digest[:8])

          print("::set-output name=result::{}".format(result))
      - uses: actions/cache@v1
        with:
          path: ~/.cache/pre-commit
          key: ${{ steps.cache_key.outputs.result }}-${{ hashFiles('hypermodern-python/.pre-commit-config.yaml') }}
          restore-keys: |
            ${{ steps.cache_key.outputs.result }}-
      - name: Run linter suite using pre-commit
        run: pre-commit run --all-files --show-diff-on-failure --color=always
        working-directory: hypermodern-python
